<?php

namespace App\Http\Requests;

use Illuminate\Contracts\Validation\Validator;
use Illuminate\Foundation\Http\FormRequest;

class TeacherFormRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, mixed>
     */
    public function rules()
    {
        return [
            'username'              => 'required|unique:teachers',
            'name_english'          => 'required|regex:/^[a-zA-Z0-9\s]+$/',
            'name_bangla'           => 'required',
            'email'                 => 'required|email|unique:users',
            'phone'                 => 'unique:teachers|regex:/(01)[0-9]{9}/',
            'designation_id'        => 'required|numeric',
            'salary_grade_id'       => 'required|numeric',
            'dob'                   => 'required',
            'mpo_index_number'      => 'required',
//            'bank_name'             => 'required|alpha_dash',
//            'bank_account_no'       => 'required|numeric',
//            'gender'                => 'required',
//            'religion'              => 'required',
//            'jod'                   => 'required',
//            'image'                 => 'required|image',
//            'subject'               => 'required',
//            'highest_education'     => 'alpha_dash',
//            'status'                => 'required',
//            'educational_files'     => 'mimes:pdf,doc,docx,jpg,jpeg,png'
        ];
    }

    public function messages()
    {
        return [
//            'salary_grade_id.required'  => 'Payment Grade is required.',
            'educational_files.mimes'   => 'File type is not supported. Supported formats are pdf,doc,docx,jpg,jpeg,png'
        ];
    }

    public function failedValidation(Validator $validator)
    {
        parent::failedValidation($validator); // TODO: Change the autogenerated stub
        return back()->withInput()->withErrors($validator);
    }
}
