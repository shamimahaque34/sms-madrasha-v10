<?php

namespace App\Models;

use App\Models\Backend\UserManagement\Admin;
use App\Models\Backend\UserManagement\ParentInfo;
use App\Models\Backend\UserManagement\Student;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Support\Facades\Hash;
use Laravel\Fortify\TwoFactorAuthenticatable;
use Laravel\Jetstream\HasProfilePhoto;
use Laravel\Sanctum\HasApiTokens;
use App\Models\Backend\UserManagement\Teacher;

class User extends Authenticatable
{
    use HasApiTokens;
    use HasFactory;
    use HasProfilePhoto;
    use Notifiable;
    use TwoFactorAuthenticatable;

    public static $user;

    /**
     * The attributes that are mass assignable.
     *
     * @var string[]
     */
    protected $fillable = [
        'name',
        'email',
        'password',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array
     */
    protected $hidden = [
        'password',
        'remember_token',
        'two_factor_recovery_codes',
        'two_factor_secret',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    /**
     * The accessors to append to the model's array form.
     *
     * @var array
     */
    protected $appends = [
        'profile_photo_url',
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::deleting(function ($user) {
            $existAdmin = Admin::where('user_id', $user->id)->first();
            if ($existAdmin)
            {
                if (file_exists($existAdmin->image))
                {
                    unlink($existAdmin->image);
                }
                $existAdmin->delete();
            }
            $existTeacher = Teacher::where('user_id', $user->id)->first();
            if ($existTeacher)
            {
                if (file_exists($existTeacher->image))
                {
                    unlink($existTeacher->image);
                }
                $existTeacher->delete();
            }
        });
    }

    public static function updateUser($request, $id)
    {
        self::$user = User::find($id);
        self::$user->name   = $request->name;
        self::$user->email   = $request->email;
        if (isset($request->password))
        {
            self::$user->password   = Hash::make($request->password);
        }
        self::$user->roles()->sync($request->roles);
    }

    public static function saveData($request)
    {
        self::$user = User::create([
            'name'  => $request->name,
            'email'  => $request->email,
            'password'  => Hash::make($request->password),
        ]);
        self::$user->roles()->sync($request->roles);
    }

    public static function createAdminUser($request)
    {
        self::$user = User::create([
            'name'      => $request->name_english,
            'email'     => $request->email,
            'password'  => Hash::make($request->phone),
        ]);
        return self::$user->id;
    }

    public static function updateAdminUser ($request, $userId)
    {
        self::$user = User::findOrFail($userId);
        self::$user->name   = $request->name_english;
        self::$user->email   = $request->email;
        self::$user->save();
        return self::$user->id;
    }
    public static function updateOrCreateUser($name, $email, $password = null, $id = null)
    {
        if (!empty($id))
        {
            self::$user = User::find($id);
        } else {
            self::$user = new User();
        }
        self::$user->name       = $name;
        self::$user->email       = $email;
        if (empty($id))
        {
            self::$user->password       = Hash::make($password);
        }
        self::$user->save();
        return self::$user;
    }

    public function roles ()
    {
        return $this->belongsToMany(Role::class);
    }

    public function subjects()
    {
        return $this->hasMany(Subject::class, 'updated_by');
    }

    public function teacher()
    {
        return $this->hasOne(Teacher::class);
    }

    public function admin()
    {
        return $this->hasOne(Admin::class);
    }

//    public function academicStuff()
//    {
//        return $this->hasOne(AcademicStuff::class);
//    }

    public function parent()
    {
        return $this->hasOne(ParentInfo::class);
    }

    public function student()
    {
        return $this->hasOne(Student::class);
    }

//    public function academicStuffs()
//    {
//        return $this->hasMany(AcademicStuff::class, 'created_by');
//    }

    public function teachers_creator()
    {
        return $this->hasMany(Teacher::class, 'created_by');
    }

//    public function notificationMessages()
//    {
//        return $this->hasMany(NotificationMessage::class);
//    }
//
//    public function bulkEmailMessages()
//    {
//        return $this->hasMany(BulkEmailMessage::class);
//    }
//
//    public function bulkSenderEmailMessages2()
//    {
//        return $this->hasMany(BulkEmailMessage::class, 'sender_id');
//    }
//
//    public function senderNotificationMessages()
//    {
//        return $this->hasMany(NotificationMessage::class, 'sender_id');
//    }
//
//    public function studentFeePayments()
//    {
//        return $this->hasMany(StudentFeePayment::class);
//    }
//
//    public function hostelMember()
//    {
//        return $this->hasOne(HostelMember::class);
//    }
//
//    public function libraryMember()
//    {
//        return $this->hasOne(LibraryMember::class);
//    }

    public function isSuperAdmin()
    {
        return in_array($this->email, config('auth.super_admins'));
    }
}
